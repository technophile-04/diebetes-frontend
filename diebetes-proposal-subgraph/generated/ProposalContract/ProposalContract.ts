// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Pay extends ethereum.Event {
  get params(): Pay__Params {
    return new Pay__Params(this);
  }
}

export class Pay__Params {
  _event: Pay;

  constructor(event: Pay) {
    this._event = event;
  }

  get contributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ProposalCreated extends ethereum.Event {
  get params(): ProposalCreated__Params {
    return new ProposalCreated__Params(this);
  }
}

export class ProposalCreated__Params {
  _event: ProposalCreated;

  constructor(event: ProposalCreated) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fundingTarget(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get researchPaperCID(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class ResearchFindingAdded extends ethereum.Event {
  get params(): ResearchFindingAdded__Params {
    return new ResearchFindingAdded__Params(this);
  }
}

export class ResearchFindingAdded__Params {
  _event: ResearchFindingAdded;

  constructor(event: ResearchFindingAdded) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get researchFindingCID(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class WithdrawContribution extends ethereum.Event {
  get params(): WithdrawContribution__Params {
    return new WithdrawContribution__Params(this);
  }
}

export class WithdrawContribution__Params {
  _event: WithdrawContribution;

  constructor(event: WithdrawContribution) {
    this._event = event;
  }

  get contributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get withdrawnAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawFunding extends ethereum.Event {
  get params(): WithdrawFunding__Params {
    return new WithdrawFunding__Params(this);
  }
}

export class WithdrawFunding__Params {
  _event: WithdrawFunding;

  constructor(event: WithdrawFunding) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fundingAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProposalContract__fundingInfoOfResult {
  value0: Address;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getProposalOwner(): Address {
    return this.value0;
  }

  getResearchPaperCID(): string {
    return this.value1;
  }

  getResearchFindingCID(): string {
    return this.value2;
  }

  getFundingTarget(): BigInt {
    return this.value3;
  }

  getFundingReceived(): BigInt {
    return this.value4;
  }
}

export class ProposalContract extends ethereum.SmartContract {
  static bind(address: Address): ProposalContract {
    return new ProposalContract("ProposalContract", address);
  }

  DOMAIN_ID(): BigInt {
    let result = super.call("DOMAIN_ID", "DOMAIN_ID():(uint32)", []);

    return result[0].toBigInt();
  }

  try_DOMAIN_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DOMAIN_ID", "DOMAIN_ID():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  connext(): Address {
    let result = super.call("connext", "connext():(address)", []);

    return result[0].toAddress();
  }

  try_connext(): ethereum.CallResult<Address> {
    let result = super.tryCall("connext", "connext():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contributionOf(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "contributionOf",
      "contributionOf(address,uint256):(uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_contributionOf(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contributionOf",
      "contributionOf(address,uint256):(uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingInfoOf(param0: BigInt): ProposalContract__fundingInfoOfResult {
    let result = super.call(
      "fundingInfoOf",
      "fundingInfoOf(uint256):(address,string,string,uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ProposalContract__fundingInfoOfResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_fundingInfoOf(
    param0: BigInt
  ): ethereum.CallResult<ProposalContract__fundingInfoOfResult> {
    let result = super.tryCall(
      "fundingInfoOf",
      "fundingInfoOf(uint256):(address,string,string,uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ProposalContract__fundingInfoOfResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  numProposals(): BigInt {
    let result = super.call("numProposals", "numProposals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numProposals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numProposals", "numProposals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  xReceive(
    _transferId: Bytes,
    _amount: BigInt,
    _asset: Address,
    _originSender: Address,
    _origin: BigInt,
    _callData: Bytes
  ): Bytes {
    let result = super.call(
      "xReceive",
      "xReceive(bytes32,uint256,address,address,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_transferId),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_originSender),
        ethereum.Value.fromUnsignedBigInt(_origin),
        ethereum.Value.fromBytes(_callData)
      ]
    );

    return result[0].toBytes();
  }

  try_xReceive(
    _transferId: Bytes,
    _amount: BigInt,
    _asset: Address,
    _originSender: Address,
    _origin: BigInt,
    _callData: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "xReceive",
      "xReceive(bytes32,uint256,address,address,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_transferId),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_originSender),
        ethereum.Value.fromUnsignedBigInt(_origin),
        ethereum.Value.fromBytes(_callData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _connext(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddResearchFindingsCall extends ethereum.Call {
  get inputs(): AddResearchFindingsCall__Inputs {
    return new AddResearchFindingsCall__Inputs(this);
  }

  get outputs(): AddResearchFindingsCall__Outputs {
    return new AddResearchFindingsCall__Outputs(this);
  }
}

export class AddResearchFindingsCall__Inputs {
  _call: AddResearchFindingsCall;

  constructor(call: AddResearchFindingsCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _researchFindingCID(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class AddResearchFindingsCall__Outputs {
  _call: AddResearchFindingsCall;

  constructor(call: AddResearchFindingsCall) {
    this._call = call;
  }
}

export class CreateFundingProposalCall extends ethereum.Call {
  get inputs(): CreateFundingProposalCall__Inputs {
    return new CreateFundingProposalCall__Inputs(this);
  }

  get outputs(): CreateFundingProposalCall__Outputs {
    return new CreateFundingProposalCall__Outputs(this);
  }
}

export class CreateFundingProposalCall__Inputs {
  _call: CreateFundingProposalCall;

  constructor(call: CreateFundingProposalCall) {
    this._call = call;
  }

  get _fundingTarget(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _researchPaperCID(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateFundingProposalCall__Outputs {
  _call: CreateFundingProposalCall;

  constructor(call: CreateFundingProposalCall) {
    this._call = call;
  }
}

export class PayCall extends ethereum.Call {
  get inputs(): PayCall__Inputs {
    return new PayCall__Inputs(this);
  }

  get outputs(): PayCall__Outputs {
    return new PayCall__Outputs(this);
  }
}

export class PayCall__Inputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PayCall__Outputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }
}

export class WithdrawFundingAmountCall extends ethereum.Call {
  get inputs(): WithdrawFundingAmountCall__Inputs {
    return new WithdrawFundingAmountCall__Inputs(this);
  }

  get outputs(): WithdrawFundingAmountCall__Outputs {
    return new WithdrawFundingAmountCall__Outputs(this);
  }
}

export class WithdrawFundingAmountCall__Inputs {
  _call: WithdrawFundingAmountCall;

  constructor(call: WithdrawFundingAmountCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawFundingAmountCall__Outputs {
  _call: WithdrawFundingAmountCall;

  constructor(call: WithdrawFundingAmountCall) {
    this._call = call;
  }
}

export class XReceiveCall extends ethereum.Call {
  get inputs(): XReceiveCall__Inputs {
    return new XReceiveCall__Inputs(this);
  }

  get outputs(): XReceiveCall__Outputs {
    return new XReceiveCall__Outputs(this);
  }
}

export class XReceiveCall__Inputs {
  _call: XReceiveCall;

  constructor(call: XReceiveCall) {
    this._call = call;
  }

  get _transferId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _asset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _originSender(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _origin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _callData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class XReceiveCall__Outputs {
  _call: XReceiveCall;

  constructor(call: XReceiveCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
